(grammar (definitions (decl_brace type symbol_value (symbols program statement expression))) (rules (rule root (alts (alt program (action_block " tree_context()->root() = $1; YYACCEPT; ")) (alt error (action_block " yyclearin; /* yyerrok; YYABORT; */ ")))) (rule program (alt (terms (* (( (alt (terms statement ',') (action_block " /* AAA */ $$ = $1; ")))) statement) (action_block " /* BBB */ $$ = $1 ? MAKE_SYMBOL(\',\', 2, $1, $2) : $2; "))) (rule statement (alt (terms (? (( (alt (terms ID_IDENT '=') (action_block " /* CCC */ $$ = MAKE_TERM(ID_IDENT, $1); ")))) expression) (action_block " /* DDD */ $$ = $1 ? MAKE_SYMBOL(\'=\', 2, $1, $2) : $2; "))) (rule expression (alts (alt ID_INT (action_block " $$ = MAKE_TERM(ID_INT, $1); ")) (alt ID_FLOAT (action_block " $$ = MAKE_TERM(ID_FLOAT, $1); ")) (alt ID_IDENT (action_block " $$ = MAKE_TERM(ID_IDENT, $1); ")) (alt (terms '-' expression %prec ID_UMINUS) (action_block " $$ = MAKE_SYMBOL(ID_UMINUS, 1, $2); ")) (alt (terms expression '+' expression) (action_block " $$ = MAKE_SYMBOL(\'+\', 2, $1, $3); ")) (alt (terms expression '-' expression) (action_block " $$ = MAKE_SYMBOL(\'-\', 2, $1, $3); ")) (alt (terms expression '*' expression) (action_block " $$ = MAKE_SYMBOL(\'*\', 2, $1, $3); ")) (alt (terms expression '/' expression) (action_block " $$ = MAKE_SYMBOL(\'/\', 2, $1, $3); ")) (alt (terms '(' expression ')') (action_block " $$ = $2; "))))) (code "\n"))
