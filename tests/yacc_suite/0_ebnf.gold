(grammar (definitions (definition union) (definition error-verbose) (definition nonassoc ID_BASE) (definition token int_value ID_INT) (definition token float_value ID_FLOAT) (definition token ident_value ID_IDENT) (definition type symbol_value (symbols program statement expression)) (definition left (symbols '+' '-')) (definition left (symbols '*' '/')) (definition nonassoc ID_UMINUS) (definition nonassoc ID_COUNT)) (rules (rule root (rule_rhs (alt program "{ tree_context()->root() = $1; YYACCEPT; }") (alt error "{ yyclearin; /* yyerrok; YYABORT; */ }"))) (rule program (rule_rhs (alt statement "{ $$ = $1; }") (alt (terms program ',' statement) "{ $$ = MAKE_SYMBOL(\',\', 2, $1, $3); }"))) (rule statement (rule_rhs (alt expression "{ $$ = $1; }") (alt (terms ID_IDENT '=' expression) "{ $$ = MAKE_SYMBOL(\'=\', 2, MAKE_TERM(ID_IDENT, $1), $3); }"))) (rule expression (rule_rhs (alt ID_INT "{ $$ = MAKE_TERM(ID_INT, $1); }") (alt ID_FLOAT "{ $$ = MAKE_TERM(ID_FLOAT, $1); }") (alt ID_IDENT "{ $$ = MAKE_TERM(ID_IDENT, $1); }") (alt (terms '-' expression %prec ID_UMINUS) "{ $$ = MAKE_SYMBOL(ID_UMINUS, 1, $2); }") (alt (terms expression '+' expression) "{ $$ = MAKE_SYMBOL(\'+\', 2, $1, $3); }") (alt (terms expression '-' expression) "{ $$ = MAKE_SYMBOL(\'-\', 2, $1, $3); }") (alt (terms expression '*' expression) "{ $$ = MAKE_SYMBOL(\'*\', 2, $1, $3); }") (alt (terms expression '/' expression) "{ $$ = MAKE_SYMBOL(\'/\', 2, $1, $3); }") (alt (terms '(' expression ')') "{ $$ = $2; }")))))
