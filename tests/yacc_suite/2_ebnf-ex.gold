(grammar (definitions (decl_brace type symbol_value (symbols program statement expression program_0 program_1 statement_0 statement_1))) (rules (rule root (alts (alt (terms program) (action_block " tree_context()->root() = $1; YYACCEPT; ")) (alt (terms error) (action_block " yyclearin; /* yyerrok; YYABORT; */ ")))) (rule program (alt (terms program_0 statement) (action_block " /* BBB */ $$ = $1 ? MAKE_SYMBOL(\',\', 2, $1, $2) : $2; "))) (rule program_0 (alts (alt (action_block "           $$ = NULL; ")) (alt (terms program_0 program_1) (action_block " /* ??? */ $$ = $1 ? MAKE_SYMBOL(\',\', 2, $1, $2) : $2; ")))) (rule program_1 (alt (terms statement ',') (action_block " /* AAA */ $$ = $1; "))) (rule statement (alt (terms statement_0 expression) (action_block " /* DDD */ $$ = $1 ? MAKE_SYMBOL(\'=\', 2, $1, $2) : $2; "))) (rule statement_0 (alts (alt (action_block " $$ = NULL; ")) (alt (terms statement_1) (action_block " $$ = $1; ")))) (rule statement_1 (alt (terms ID_IDENT '=') (action_block " /* CCC */ $$ = MAKE_TERM(ID_IDENT, $1); "))) (rule expression (alts (alt (terms ID_INT) (action_block " $$ = MAKE_TERM(ID_INT, $1); ")) (alt (terms ID_FLOAT) (action_block " $$ = MAKE_TERM(ID_FLOAT, $1); ")) (alt (terms ID_IDENT) (action_block " $$ = MAKE_TERM(ID_IDENT, $1); ")) (alt (terms '-' expression %prec ID_UMINUS) (action_block " $$ = MAKE_SYMBOL(ID_UMINUS, 1, $2); ")) (alt (terms expression '+' expression) (action_block " $$ = MAKE_SYMBOL(\'+\', 2, $1, $3); ")) (alt (terms expression '-' expression) (action_block " $$ = MAKE_SYMBOL(\'-\', 2, $1, $3); ")) (alt (terms expression '*' expression) (action_block " $$ = MAKE_SYMBOL(\'*\', 2, $1, $3); ")) (alt (terms expression '/' expression) (action_block " $$ = MAKE_SYMBOL(\'/\', 2, $1, $3); ")) (alt (terms '(' expression ')') (action_block " $$ = $2; "))))) (code "\n"))
