#line 2 "lex.XLang.c"

#line 4 "lex.XLang.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer _XLANG__create_buffer
#define yy_delete_buffer _XLANG__delete_buffer
#define yy_flex_debug _XLANG__flex_debug
#define yy_init_buffer _XLANG__init_buffer
#define yy_flush_buffer _XLANG__flush_buffer
#define yy_load_buffer_state _XLANG__load_buffer_state
#define yy_switch_to_buffer _XLANG__switch_to_buffer
#define yyin _XLANG_in
#define yyleng _XLANG_leng
#define yylex _XLANG_lex
#define yylineno _XLANG_lineno
#define yyout _XLANG_out
#define yyrestart _XLANG_restart
#define yytext _XLANG_text
#define yywrap _XLANG_wrap
#define yyalloc _XLANG_alloc
#define yyrealloc _XLANG_realloc
#define yyfree _XLANG_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE _XLANG_restart(_XLANG_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int _XLANG_leng;

extern FILE *_XLANG_in, *_XLANG_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up _XLANG_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up _XLANG_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via _XLANG_restart()), so that the user can continue scanning by
	 * just pointing _XLANG_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when _XLANG_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int _XLANG_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow _XLANG_wrap()'s to do buffer switches
 * instead of setting up a fresh _XLANG_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void _XLANG_restart (FILE *input_file  );
void _XLANG__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE _XLANG__create_buffer (FILE *file,int size  );
void _XLANG__delete_buffer (YY_BUFFER_STATE b  );
void _XLANG__flush_buffer (YY_BUFFER_STATE b  );
void _XLANG_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void _XLANG_pop_buffer_state (void );

static void _XLANG_ensure_buffer_stack (void );
static void _XLANG__load_buffer_state (void );
static void _XLANG__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER _XLANG__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE _XLANG__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE _XLANG__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE _XLANG__scan_bytes (yyconst char *bytes,int len  );

void *_XLANG_alloc (yy_size_t  );
void *_XLANG_realloc (void *,yy_size_t  );
void _XLANG_free (void *  );

#define yy_new_buffer _XLANG__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        _XLANG_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _XLANG__create_buffer(_XLANG_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        _XLANG_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            _XLANG__create_buffer(_XLANG_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define _XLANG_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *_XLANG_in = (FILE *) 0, *_XLANG_out = (FILE *) 0;

typedef int yy_state_type;

extern int _XLANG_lineno;

int _XLANG_lineno = 1;

extern char *_XLANG_text;
#define yytext_ptr _XLANG_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up _XLANG_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	_XLANG_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[243] =
    {   0,
        0,    0,   95,   93,   92,   92,   79,   93,   85,   78,
       93,   73,   74,   83,   82,   70,   81,   77,   84,    2,
        2,   71,   67,   86,   72,   87,   90,    1,    1,   75,
       76,   88,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   68,   89,   69,
       80,   92,   66,    0,   44,    0,   52,   69,   61,   53,
        0,    0,   50,   58,   48,   59,   49,   60,    0,    3,
       51,   43,    2,    0,   39,    0,    2,   76,   68,   75,
       57,   63,   65,   64,   56,    1,    1,    0,    0,   54,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   55,   62,   40,   45,    0,
       42,    3,    0,   43,   38,    0,   41,   37,   47,   46,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
       42,    0,   42,    0,   43,   41,   37,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    0,   42,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   25,   25,   25,   26,   27,
       28,   28,   28,   28,   28,   29,   28,   28,   28,   28,
       28,   28,   28,   28,   30,   28,   28,   31,   28,   28,
       32,   33,   34,   35,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   28,   46,   47,   48,   49,
       50,   51,   28,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    4,    4,    4,
        4,    1,    1,    1,    1,    4,    3,    3,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[248] =
    {   0,
        0,    0,  209,  739,   63,   65,  181,   64,   48,   65,
      167,  739,  739,  167,   61,  739,   62,   60,  165,   83,
       64,  145,  739,   85,  130,   66,  739,   78,  110,  739,
      739,  128,   85,   99,  105,  103,  114,  117,  108,  128,
      119,  130,  139,  142,  148,  156,  158,  739,   77,  739,
      739,  176,  739,   75,  739,  140,  739,  739,  739,  739,
      121,  177,  739,  739,  739,  739,  739,  739,  118,  181,
      739,  198,  203,  174,  183,    0,  231,  739,  739,  739,
       88,  739,  739,  739,   70,    0,  164,  157,   53,  739,
      177,  218,  224,  234,  236,  238,  245,  248,  250,  252,

      187,  256,  258,  264,  266,  270,  272,  274,  278,  276,
      280,  285,  292,  299,  305,  739,  739,  739,  739,  315,
      739,  313,  335,  739,  327,  317,  341,  332,  739,  739,
      346,  348,  354,  358,  360,  363,  373,  375,  380,  384,
      386,  388,  390,  400,  402,  404,  409,  413,  417,  415,
      419,  421,  424,  426,  429,  435,  437,  433,  440,  442,
      454,  472,  739,  444,  475,  739,  465,  451,  457,  480,
      482,  488,  490,  492,  496,  498,  501,  506,  508,  510,
      512,  514,  516,  519,  522,  527,  531,  533,  535,  538,
      542,  547,  552,  562,  564,  566,  568,  570,  575,  581,

      584,  586,  589,  591,  594,  596,  600,  602,  604,  608,
      606,  611,  615,  617,  619,  622,  626,  632,  634,  636,
      640,  644,  646,  648,  652,  654,  656,  658,  660,  662,
      664,  666,  672,  674,  676,  678,  680,  682,  687,  691,
      695,  739,  726,  730,  732,   71,  734
    } ;

static yyconst flex_int16_t yy_def[248] =
    {   0,
      242,    1,  242,  242,  242,  242,  242,  243,  242,  242,
      244,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  245,  245,  242,
      242,  242,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  242,  242,  242,
      242,  242,  242,  243,  242,  243,  242,  242,  242,  242,
      244,  244,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  246,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  247,  245,  243,  244,  242,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  246,  242,  242,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  242,
      242,  242,  242,  242,  242,  242,  242,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  242,  242,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,    0,  242,  242,  242,  242,  242
    } ;

static yyconst flex_int16_t yy_nxt[804] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   28,   28,   28,   29,   28,
       28,   30,    4,   31,   32,   28,   33,   34,   35,   36,
       37,   38,   39,   28,   40,   28,   41,   28,   28,   28,
       28,   42,   43,   44,   45,   46,   47,   28,   28,   28,
       48,   49,   50,   51,   52,   52,   52,   52,   55,   57,
       58,   59,   64,  128,   69,   66,   70,   70,   72,   55,
       77,   77,   65,   67,   68,   62,   60,   84,   85,   74,
       79,  130,   75,   75,   86,   86,   56,   72,  116,   73,

       73,   86,   86,   80,   74,   81,   82,   56,   74,  129,
       75,   75,   75,   76,   88,   86,   86,   89,   75,   86,
       86,   86,   86,   74,   86,   86,   86,   86,  118,   75,
       86,   86,  119,   86,   86,   86,   86,   75,  117,   91,
       76,   93,  242,   96,   86,   86,   86,   86,   94,   90,
       92,   83,   97,   62,   95,   86,   86,  103,   86,   86,
       98,   55,   99,  101,   86,   86,  102,   78,  106,  104,
      107,  100,   86,   86,   86,   86,  105,   52,   52,  242,
       86,   86,  108,  109,   61,  126,   71,  126,   63,   56,
      127,  127,  110,   86,   86,  111,  113,   70,   70,   62,

      112,  115,   53,   86,   86,  114,  120,  121,  242,  121,
      242,   75,   75,  242,  122,  122,  242,   72,  242,   73,
       73,  120,  121,  123,  124,  242,  124,  121,   74,   75,
      131,  125,  125,  242,   86,   86,  141,   75,  123,  124,
       86,   86,  242,   74,  124,   72,  242,   77,   77,  125,
       86,   86,   86,   86,   86,   86,   74,  125,  132,   75,
       75,   86,   86,  242,   86,   86,   86,   86,   86,   86,
      134,   74,   86,   86,   86,   86,  133,   75,  242,  136,
       86,   86,   86,   86,  135,   75,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,  242,  137,

      138,   86,   86,  242,  139,  140,  242,  142,   86,   86,
      242,  143,  151,  242,  146,   86,   86,  242,  145,  144,
      149,   86,   86,  148,  153,  147,  160,  152,  160,  122,
      122,  161,  161,  127,  127,  154,  155,  150,  162,  163,
      242,  163,  242,  157,  156,  158,  164,  242,  164,  159,
      242,  165,  165,  162,  163,  125,  125,  127,  127,  163,
      167,  167,   86,   86,   86,   86,  242,  166,  242,  166,
       86,   86,  242,  125,   86,   86,   86,   86,  167,   86,
       86,  125,  166,  242,  169,  242,  167,  166,  242,   86,
       86,   86,   86,  242,  170,  168,   86,   86,  242,  174,

       86,   86,   86,   86,   86,   86,   86,   86,  242,  171,
      175,  242,  172,  173,  242,  176,   86,   86,   86,   86,
       86,   86,  179,  242,  178,   86,   86,  177,  242,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  180,
       86,   86,   86,   86,  181,   86,   86,  242,  182,   86,
       86,   86,   86,   86,   86,  186,   86,   86,  161,  161,
      165,  165,  242,  183,  184,  185,  190,   86,   86,  194,
      161,  161,  187,   86,   86,  188,  193,  189,  191,  192,
      121,  242,  121,  196,  242,  196,  195,  242,  197,  197,
      242,  165,  165,  167,  167,  121,   86,   86,   86,   86,

      121,  124,  198,  124,   86,   86,   86,   86,   86,   86,
      242,  167,   86,   86,   86,   86,  124,   86,   86,  167,
      242,  124,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,  200,   86,   86,  242,   86,   86,
      242,  199,  202,   86,   86,  242,  201,   86,   86,   86,
       86,   86,   86,  242,   86,   86,  242,  203,   86,   86,
      242,  204,  208,   86,   86,  242,  205,  206,   86,   86,
      242,  211,  207,  212,  242,  210,  209,  213,   86,   86,
       86,   86,  197,  197,  197,  197,   86,   86,  242,  215,
      214,   86,   86,  242,  163,  242,  163,   86,   86,  242,

       86,   86,   86,   86,  217,   86,   86,   86,   86,  163,
       86,   86,   86,   86,  163,  216,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,  220,   86,   86,  218,
      219,   86,   86,   86,   86,   86,   86,  221,   86,   86,
      242,  224,   86,   86,  223,  225,  226,  222,   86,   86,
       86,   86,   86,   86,  228,  229,   86,   86,  242,  227,
       86,   86,   86,   86,   86,   86,  231,  230,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,  234,  242,  232,  233,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

      242,  235,  236,   86,   86,  242,  238,   86,   86,  242,
      237,   86,   86,  242,  242,  242,  242,  240,  242,  242,
      241,  242,  242,  242,  242,  239,   54,   54,   54,   54,
       61,  242,   61,   61,   87,   87,   86,   86,    3,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242
    } ;

static yyconst flex_int16_t yy_chk[804] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    6,    6,    8,    9,
        9,   10,   15,  246,   18,   17,   18,   18,   21,   54,
       21,   21,   15,   17,   17,   89,   10,   26,   26,   21,
       24,   85,   21,   21,   28,   28,    8,   20,   49,   20,

       20,   33,   33,   24,   21,   24,   24,   54,   20,   81,
       21,   20,   20,   20,   29,   34,   34,   29,   21,   36,
       36,   35,   35,   20,   39,   39,   29,   29,   61,   20,
       37,   37,   69,   38,   38,   41,   41,   20,   49,   33,
       20,   35,   56,   36,   40,   40,   42,   42,   35,   32,
       34,   25,   36,   61,   35,   43,   43,   39,   44,   44,
       37,   88,   37,   38,   45,   45,   38,   22,   41,   40,
       42,   37,   46,   46,   47,   47,   40,   52,   52,   62,
       87,   87,   43,   43,   62,   74,   19,   74,   14,   88,
       74,   74,   43,   91,   91,   43,   45,   70,   70,   11,

       44,   47,    7,  101,  101,   46,   70,   70,    3,   70,
        0,   75,   75,    0,   72,   72,    0,   73,    0,   73,
       73,   70,   70,   72,   72,    0,   72,   70,   73,   75,
       91,   73,   73,    0,   92,   92,  101,   75,   72,   72,
       93,   93,    0,   73,   72,   77,    0,   77,   77,   73,
       94,   94,   95,   95,   96,   96,   77,   73,   92,   77,
       77,   97,   97,    0,   98,   98,   99,   99,  100,  100,
       94,   77,  102,  102,  103,  103,   93,   77,    0,   96,
      104,  104,  105,  105,   95,   77,  106,  106,  107,  107,
      108,  108,  110,  110,  109,  109,  111,  111,    0,   97,

       98,  112,  112,    0,   99,  100,    0,  102,  113,  113,
        0,  103,  110,    0,  107,  114,  114,    0,  106,  105,
      109,  115,  115,  108,  111,  107,  120,  110,  120,  122,
      122,  120,  120,  126,  126,  112,  113,  109,  122,  122,
        0,  122,    0,  114,  113,  114,  123,    0,  123,  115,
        0,  123,  123,  122,  122,  125,  125,  127,  127,  122,
      128,  128,  131,  131,  132,  132,    0,  127,    0,  127,
      133,  133,    0,  125,  134,  134,  135,  135,  128,  136,
      136,  125,  127,    0,  132,    0,  128,  127,    0,  137,
      137,  138,  138,    0,  133,  131,  139,  139,    0,  136,

      140,  140,  141,  141,  142,  142,  143,  143,    0,  134,
      137,    0,  135,  135,    0,  138,  144,  144,  145,  145,
      146,  146,  141,    0,  140,  147,  147,  139,    0,  148,
      148,  150,  150,  149,  149,  151,  151,  152,  152,  143,
      153,  153,  154,  154,  145,  155,  155,    0,  146,  158,
      158,  156,  156,  157,  157,  150,  159,  159,  160,  160,
      164,  164,    0,  147,  148,  149,  154,  168,  168,  158,
      161,  161,  151,  169,  169,  152,  157,  153,  155,  156,
      161,    0,  161,  162,    0,  162,  159,    0,  162,  162,
        0,  165,  165,  167,  167,  161,  170,  170,  171,  171,

      161,  165,  169,  165,  172,  172,  173,  173,  174,  174,
        0,  167,  175,  175,  176,  176,  165,  177,  177,  167,
        0,  165,  178,  178,  179,  179,  180,  180,  181,  181,
      182,  182,  183,  183,  173,  184,  184,    0,  185,  185,
        0,  172,  175,  186,  186,    0,  174,  187,  187,  188,
      188,  189,  189,    0,  190,  190,    0,  178,  191,  191,
        0,  179,  185,  192,  192,    0,  182,  183,  193,  193,
        0,  188,  184,  189,    0,  187,  186,  190,  194,  194,
      195,  195,  196,  196,  197,  197,  198,  198,    0,  192,
      191,  199,  199,    0,  197,    0,  197,  200,  200,    0,

      201,  201,  202,  202,  195,  203,  203,  204,  204,  197,
      205,  205,  206,  206,  197,  194,  207,  207,  208,  208,
      209,  209,  211,  211,  210,  210,  202,  212,  212,  200,
      201,  213,  213,  214,  214,  215,  215,  203,  216,  216,
        0,  208,  217,  217,  206,  209,  210,  205,  218,  218,
      219,  219,  220,  220,  212,  213,  221,  221,    0,  211,
      222,  222,  223,  223,  224,  224,  216,  215,  225,  225,
      226,  226,  227,  227,  228,  228,  229,  229,  230,  230,
      231,  231,  232,  232,  222,    0,  218,  219,  233,  233,
      234,  234,  235,  235,  236,  236,  237,  237,  238,  238,

        0,  229,  230,  239,  239,    0,  232,  240,  240,    0,
      231,  241,  241,    0,    0,    0,    0,  236,    0,    0,
      237,    0,    0,    0,    0,  234,  243,  243,  243,  243,
      244,    0,  244,  244,  245,  245,  247,  247,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  242,  242
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int _XLANG__flex_debug;
int _XLANG__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *_XLANG_text;
#line 1 "src/XLang.l"
/* Variations of a Flex-Bison parser
 * -- based on "A COMPACT GUIDE TO LEX & YACC" by Tom Niemann
 * Copyright (C) 2011 Jerry Chen <mailto:onlyuser@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
#line 23 "src/XLang.l"

#include "XLang.h" // node::NodeIdentIFace
#include "XLang.tab.h" // ID_XXX (yacc generated)
#include <stdlib.h> // atoi

#line 764 "lex.XLang.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int _XLANG_lex_destroy (void );

int _XLANG_get_debug (void );

void _XLANG_set_debug (int debug_flag  );

YY_EXTRA_TYPE _XLANG_get_extra (void );

void _XLANG_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *_XLANG_get_in (void );

void _XLANG_set_in  (FILE * in_str  );

FILE *_XLANG_get_out (void );

void _XLANG_set_out  (FILE * out_str  );

int _XLANG_get_leng (void );

char *_XLANG_get_text (void );

int _XLANG_get_lineno (void );

void _XLANG_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int _XLANG_wrap (void );
#else
extern int _XLANG_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( _XLANG_text, _XLANG_leng, 1, _XLANG_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( _XLANG_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( _XLANG_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, _XLANG_in))==0 && ferror(_XLANG_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(_XLANG_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int _XLANG_lex (void);

#define YY_DECL int _XLANG_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after _XLANG_text and _XLANG_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 49 "src/XLang.l"


#line 952 "lex.XLang.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! _XLANG_in )
			_XLANG_in = stdin;

		if ( ! _XLANG_out )
			_XLANG_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			_XLANG_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				_XLANG__create_buffer(_XLANG_in,YY_BUF_SIZE );
		}

		_XLANG__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of _XLANG_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 243 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 739 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 51 "src/XLang.l"
{
                _XLANG_lval.ident_value = tree_context()->alloc_unique_string(_XLANG_text);
                return IDENTIFIER;
            }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 56 "src/XLang.l"
{
                _XLANG_lval.int_value = atoi(_XLANG_text);
                return ID_INT;
            }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "src/XLang.l"
{
                _XLANG_lval.float_value = atof(_XLANG_text);
                return ID_FLOAT;
            }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 66 "src/XLang.l"
{ return(AUTO); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 67 "src/XLang.l"
{ return(BREAK); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 68 "src/XLang.l"
{ return(CASE); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "src/XLang.l"
{ return(CHAR); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 70 "src/XLang.l"
{ return(CONST); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 71 "src/XLang.l"
{ return(CONTINUE); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "src/XLang.l"
{ return(DEFAULT); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 73 "src/XLang.l"
{ return(DO); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 74 "src/XLang.l"
{ return(DOUBLE); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 75 "src/XLang.l"
{ return(ELSE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 76 "src/XLang.l"
{ return(ENUM); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "src/XLang.l"
{ return(EXTERN); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 78 "src/XLang.l"
{ return(FLOAT); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 79 "src/XLang.l"
{ return(FOR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 80 "src/XLang.l"
{ return(GOTO); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 81 "src/XLang.l"
{ return(IF); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "src/XLang.l"
{ return(INT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 83 "src/XLang.l"
{ return(LONG); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 84 "src/XLang.l"
{ return(REGISTER); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 85 "src/XLang.l"
{ return(RETURN); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 86 "src/XLang.l"
{ return(SHORT); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 87 "src/XLang.l"
{ return(SIGNED); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 88 "src/XLang.l"
{ return(SIZEOF); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 89 "src/XLang.l"
{ return(STATIC); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 90 "src/XLang.l"
{ return(STRUCT); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 91 "src/XLang.l"
{ return(SWITCH); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 92 "src/XLang.l"
{ return(TYPEDEF); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 93 "src/XLang.l"
{ return(UNION); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 94 "src/XLang.l"
{ return(UNSIGNED); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 95 "src/XLang.l"
{ return(VOID); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 96 "src/XLang.l"
{ return(VOLATILE); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 97 "src/XLang.l"
{ return(WHILE); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 99 "src/XLang.l"
{ }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "src/XLang.l"
{ return(CONSTANT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 102 "src/XLang.l"
{ return(CONSTANT); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 103 "src/XLang.l"
{ return(CONSTANT); }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 104 "src/XLang.l"
{ return(CONSTANT); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 106 "src/XLang.l"
{ return(CONSTANT); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 107 "src/XLang.l"
{ return(CONSTANT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 108 "src/XLang.l"
{ return(CONSTANT); }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 110 "src/XLang.l"
{ return(STRING_LITERAL); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 112 "src/XLang.l"
{ return(ELLIPSIS); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 113 "src/XLang.l"
{ return(RIGHT_ASSIGN); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 114 "src/XLang.l"
{ return(LEFT_ASSIGN); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 115 "src/XLang.l"
{ return(ADD_ASSIGN); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 116 "src/XLang.l"
{ return(SUB_ASSIGN); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 117 "src/XLang.l"
{ return(MUL_ASSIGN); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 118 "src/XLang.l"
{ return(DIV_ASSIGN); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 119 "src/XLang.l"
{ return(MOD_ASSIGN); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 120 "src/XLang.l"
{ return(AND_ASSIGN); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 121 "src/XLang.l"
{ return(XOR_ASSIGN); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "src/XLang.l"
{ return(OR_ASSIGN); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 123 "src/XLang.l"
{ return(RIGHT_OP); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 124 "src/XLang.l"
{ return(LEFT_OP); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 125 "src/XLang.l"
{ return(INC_OP); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 126 "src/XLang.l"
{ return(DEC_OP); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 127 "src/XLang.l"
{ return(PTR_OP); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 128 "src/XLang.l"
{ return(AND_OP); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 129 "src/XLang.l"
{ return(OR_OP); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 130 "src/XLang.l"
{ return(LE_OP); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 131 "src/XLang.l"
{ return(GE_OP); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 132 "src/XLang.l"
{ return(EQ_OP); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 133 "src/XLang.l"
{ return(NE_OP); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 134 "src/XLang.l"
{ return(';'); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 135 "src/XLang.l"
{ return('{'); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 136 "src/XLang.l"
{ return('}'); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 137 "src/XLang.l"
{ return(','); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 138 "src/XLang.l"
{ return(':'); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 139 "src/XLang.l"
{ return('='); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 140 "src/XLang.l"
{ return('('); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 141 "src/XLang.l"
{ return(')'); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 142 "src/XLang.l"
{ return('['); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 143 "src/XLang.l"
{ return(']'); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 144 "src/XLang.l"
{ return('.'); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 145 "src/XLang.l"
{ return('&'); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 146 "src/XLang.l"
{ return('!'); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 147 "src/XLang.l"
{ return('~'); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 148 "src/XLang.l"
{ return('-'); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 149 "src/XLang.l"
{ return('+'); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 150 "src/XLang.l"
{ return('*'); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 151 "src/XLang.l"
{ return('/'); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 152 "src/XLang.l"
{ return('%'); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 153 "src/XLang.l"
{ return('<'); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 154 "src/XLang.l"
{ return('>'); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 155 "src/XLang.l"
{ return('^'); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 156 "src/XLang.l"
{ return('|'); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 157 "src/XLang.l"
{ return('?'); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 159 "src/XLang.l"
{
                return *_XLANG_text;
            }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 163 "src/XLang.l"
; // ignore whitespace
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 165 "src/XLang.l"
{
                _XLANG_error("unknown character");
                YY_FLUSH_BUFFER;
            }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 170 "src/XLang.l"
ECHO;
	YY_BREAK
#line 1522 "lex.XLang.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed _XLANG_in at a new source and called
			 * _XLANG_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = _XLANG_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( _XLANG_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * _XLANG_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of _XLANG_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					_XLANG_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			_XLANG_restart(_XLANG_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) _XLANG_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 243 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 243 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 242);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					_XLANG_restart(_XLANG_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( _XLANG_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve _XLANG_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void _XLANG_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        _XLANG_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            _XLANG__create_buffer(_XLANG_in,YY_BUF_SIZE );
	}

	_XLANG__init_buffer(YY_CURRENT_BUFFER,input_file );
	_XLANG__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void _XLANG__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		_XLANG_pop_buffer_state();
	 *		_XLANG_push_buffer_state(new_buffer);
     */
	_XLANG_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	_XLANG__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (_XLANG_wrap()) processing, but the only time this flag
	 * is looked at is after _XLANG_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void _XLANG__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	_XLANG_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE _XLANG__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) _XLANG_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _XLANG__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) _XLANG_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in _XLANG__create_buffer()" );

	b->yy_is_our_buffer = 1;

	_XLANG__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with _XLANG__create_buffer()
 * 
 */
    void _XLANG__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		_XLANG_free((void *) b->yy_ch_buf  );

	_XLANG_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a _XLANG_restart() or at EOF.
 */
    static void _XLANG__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	_XLANG__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then _XLANG__init_buffer was _probably_
     * called from _XLANG_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void _XLANG__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		_XLANG__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void _XLANG_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	_XLANG_ensure_buffer_stack();

	/* This block is copied from _XLANG__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from _XLANG__switch_to_buffer. */
	_XLANG__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void _XLANG_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	_XLANG__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		_XLANG__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void _XLANG_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)_XLANG_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in _XLANG_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)_XLANG_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in _XLANG_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE _XLANG__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) _XLANG_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in _XLANG__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	_XLANG__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to _XLANG_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       _XLANG__scan_bytes() instead.
 */
YY_BUFFER_STATE _XLANG__scan_string (yyconst char * yystr )
{
    
	return _XLANG__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to _XLANG_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE _XLANG__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) _XLANG_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in _XLANG__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = _XLANG__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in _XLANG__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up _XLANG_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		_XLANG_text[_XLANG_leng] = (yy_hold_char); \
		(yy_c_buf_p) = _XLANG_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		_XLANG_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int _XLANG_get_lineno  (void)
{
        
    return _XLANG_lineno;
}

/** Get the input stream.
 * 
 */
FILE *_XLANG_get_in  (void)
{
        return _XLANG_in;
}

/** Get the output stream.
 * 
 */
FILE *_XLANG_get_out  (void)
{
        return _XLANG_out;
}

/** Get the length of the current token.
 * 
 */
int _XLANG_get_leng  (void)
{
        return _XLANG_leng;
}

/** Get the current token.
 * 
 */

char *_XLANG_get_text  (void)
{
        return _XLANG_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void _XLANG_set_lineno (int  line_number )
{
    
    _XLANG_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see _XLANG__switch_to_buffer
 */
void _XLANG_set_in (FILE *  in_str )
{
        _XLANG_in = in_str ;
}

void _XLANG_set_out (FILE *  out_str )
{
        _XLANG_out = out_str ;
}

int _XLANG_get_debug  (void)
{
        return _XLANG__flex_debug;
}

void _XLANG_set_debug (int  bdebug )
{
        _XLANG__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from _XLANG_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    _XLANG_in = stdin;
    _XLANG_out = stdout;
#else
    _XLANG_in = (FILE *) 0;
    _XLANG_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * _XLANG_lex_init()
     */
    return 0;
}

/* _XLANG_lex_destroy is for both reentrant and non-reentrant scanners. */
int _XLANG_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		_XLANG__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		_XLANG_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	_XLANG_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * _XLANG_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *_XLANG_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *_XLANG_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void _XLANG_free (void * ptr )
{
	free( (char *) ptr );	/* see _XLANG_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 170 "src/XLang.l"


